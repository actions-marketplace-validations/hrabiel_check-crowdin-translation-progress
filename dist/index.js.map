{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://check-crowdin-translation-progress/../../../.nvm/versions/node/v16.15.1/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://check-crowdin-translation-progress/webpack/bootstrap","../webpack://check-crowdin-translation-progress/webpack/runtime/compat","../webpack://check-crowdin-translation-progress/./index.js"],"sourcesContent":[null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst axios = require('axios').default;\n\nrun();\n\nasync function run() {\n  try {\n    const apiToken = core.getInput('api-token', { required: true });\n    const projectId = core.getInput('project-id', { required: true });\n    const organizationDomain = core.getInput('organization-domain');\n    const languages = core.getInput('languages').split(',');\n    const branchName = core.getInput('branch-name');\n    const targetProgress = Number(core.getInput('target-progress'));\n    const checkApproval = core.getBooleanInput('check-approval');\n\n    setupAxios({ apiToken, organizationDomain });\n\n    const progresses = await (\n      branchName\n        ? getBranchProgress({ projectId, branchName })\n        : getProjectProgress({ projectId })\n    );\n    const projectLanguages = progresses.map(item => item.languageId);\n    const languagesToCheck = languages.length ? languages : projectLanguages;\n\n    const errors = [];\n    languagesToCheck.forEach(language => {\n      if (!projectLanguages.includes(language)) {\n        errors.push(\n          `Language '${language}' does not exist in the project. ` +\n          `Project's languages are: ${projectLanguages.join(',')}.`\n        );\n        return;\n      }\n\n      const progress = progresses.find(item => item.languageId == language);\n      const progressPercentage = checkApproval ? progress.approvalProgress : progress.translationProgress;\n      if (progressPercentage < targetProgress) {\n        errors.push(\n          `${checkApproval ? 'Approval' : 'Translation'} progress for '${language}' (${progressPercentage}%) ` +\n          `is less then target progress (${targetProgress}%)`\n        )\n      }\n    });\n\n    if (errors.length) {\n      core.setFailed(errors.join(' '));\n    }\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nfunction setupAxios({ apiToken, organizationDomain }) {\n  const apiBaseUrl = organizationDomain\n    ? `https://${organizationDomain}.api.crowdin.com/api/v2/`\n    : 'https://api.crowdin.com/api/v2/';\n\n  axios.defaults.baseURL = apiBaseUrl;\n  axios.defaults.headers.common['Authorization'] = `Bearer ${apiToken}`;\n  axios.interceptors.response.use(\n    response => response,\n    error => {\n      const errorMessageInBody = error.response.data.error?.message;\n      if (errorMessageInBody) {\n        throw new Error(`${error.message}: ${errorMessageInBody}`);\n      }\n\n      throw error;\n    }\n  );\n}\n\nasync function getBranchProgress({ projectId, branchName }) {\n  const listBranchesResponse = await axios.get(`/projects/${projectId}/branches?name=${branchName}`);\n  const branchId = listBranchesResponse.data.data[0]?.data?.id;\n  if (!branchId) {\n    throw new Error(`No branch found with name '${branchName}'`);\n  }\n\n  const progressResponse = await axios.get(`/projects/${projectId}/branches/${branchId}/languages/progress?limit=500`);\n  return getProgressFromResponse(progressResponse);\n}\n\nasync function getProjectProgress({ projectId }) {\n  const progressResponse = await axios.get(`/projects/${projectId}/languages/progress?limit=500`);\n  return getProgressFromResponse(progressResponse)\n}\n\nfunction getProgressFromResponse(response) {\n  return response.data.data.map(item => item.data);\n}\n"],"names":[],"sourceRoot":""}